apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: dummy-api
    app.kubernetes.io/name: dummy-api
  name: dummy-api
spec:
  progressDeadlineSeconds: 600
  replicas: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: dummy-api
      app.kubernetes.io/name: dummy-api
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: dummy-api
        app.kubernetes.io/name: dummy-api
    spec:
      topologySpreadConstraints:
        - maxSkew: 3
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/instance: dummy-api
              app.kubernetes.io/name: dummy-api
      containers:
      - image: <CICD_IMAGE>
        imagePullPolicy: IfNotPresent
        name: dummy-api
        volumeMounts:
        - mountPath: /code/config.yml
          name: configs
          readOnly: true
          subPath: config.yml
        - mountPath: /code/.env
          name: configs
          readOnly: true
          subPath: .env
        ports:
        - containerPort: 8000
          name: web
          protocol: TCP
        resources: {}
        securityContext: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      volumes:
      - configMap:
          defaultMode: 420
          name: dummy
        name: configs
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
